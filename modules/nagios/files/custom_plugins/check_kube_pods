#!/bin/sh
# check_kube_pods - watch Kubernetes & OpenShift Pods
# 20181211 - smoro@redhat.com

PRG=`basename $0`
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
KUBE_ENDPOINT=
KUBE_TOKEN=
KUBE_CONFIG=$HOME/.kube/config
CHECK_CLUSTER=OpenShift
CRIT_THRESHOLD=6
WARN_THRESHOLD=3
ret=OK
msg=
perfdata=0
ENV=all
MATCH=CrashLoopBackOff
ZONE_SELECTOR=

while test "$1"
do
    case "$1" in
	-e|--endpoint)
	    if test "$2"; then
		KUBE_ENDPOINT="$2"
	    else
		echo Missing endpoint argument >&2
	    fi
	    shift
	    ;;
	-c|--critical)
	    if test "$2" -ge 0 >/dev/null 2>&1; then
		CRIT_THRESHOLD=$2
	    else
		echo Invalid critical threshold >&2
	    fi
	    shift
	    ;;
	-m|--match)
	    if test "$2"; then
		MATCH=$2
	    else
		echo Missing operand to match >&2
	    fi
	    shift
	    ;;
	-k|--kubeconfig)
	    if test -r "$2"; then
		KUBE_CONFIG="$2"
	    else
		echo "Could not read kubeconfig $2" >&2
	    fi
	    shift
	    ;;
	-o|--cluster)
	    if test "$2"; then
		CHECK_CLUSTER="$2"
		shift
	    else
		echo Missing cluster argument >&2
	    fi
	    ;;
	-s|--selector)
	    if echo "$2" | grep = >/dev/null; then
		ZONE_SELECTOR="--selector=$2"
	    elif test "$2"; then
		ZONE_SELECTOR="--selector=$2=true"
	    fi
	    if test "$ZONE_SELECTOR"; then
		ENV=$2
	    else
		echo Missing namespaces selector >&2
	    fi
	    shift
	    ;;
	-t|--token)
	    if test "$2"; then
		KUBE_TOKEN="$2"
		shift
	    else
		echo Missing token argument >&2
	    fi
	    ;;
	-w|--warning)
	    if test "$2" -ge 0 >/dev/null 2>&1; then
		WARN_THRESHOLD=$2
	    else
		echo Invalid warning threshold >&2
	    fi
	    shift
	    ;;
	*)
	    echo "Invalid argument $1" >&2
	    ;;
    esac
    shift
done

getClusterConfig()
{
    awk "BEG{ pick = 0; }{
        if (\$0 == \"[$CHECK_CLUSTER]\") {
	    pick = 1;
	} else {
	    if (\$0 ~ /^\[.*\]/) {
		pick = 0;
	    } else {
		if (pick == 1) { print \$0; }
	    }
	}
    }" /etc/nagios/k8s.cfg
}

if test -s /etc/nagios/k8s.cfg -a -z "$KUBE_TOKEN"; then
    KUBE_TOKEN=$(getClusterConfig | awk '/^token/{print $3;exit;}')
    KUBE_ENDPOINT=$(getClusterConfig | awk '/^endpoint/{print $3;exit;}')
fi
if ! which oc >/dev/null 2>&1; then
    if ! which kubectl >/dev/null 2>&1; then
	echo UNKNOWN: missing oc and kubectl binaries
	exit $UNKNOWN
    fi
    KUBE_COMMAND=kubectl
else
    KUBE_COMMAND=oc
fi
if test "$KUBE_TOKEN" -a "$KUBE_ENDPOINT"; then
    if ! $KUBE_COMMAND --insecure-skip-tls-verify "--token=$KUBE_TOKEN" "--server=$KUBE_ENDPOINT" version >/dev/null 2>&1; then
	echo UNKNOWN: invalid token querying Kubernetes API
	exit $UNKNOWN
    fi
    AUTH_STR="--insecure-skip-tls-verify --token=$KUBE_TOKEN --server=$KUBE_ENDPOINT"
elif ! test -s $HOME/.kube/config; then
    echo UNKNOWN: missing Kubernetes client configuration
    exit $UNKNOWN
elif ! $KUBE_COMMAND "--kubeconfig=$KUBE_CONFIG" version >/dev/null 2>&1; then
    echo UNKNOWN: $KUBE_COMMAND client not logged in, nor able to log in
    exit $UNKNOWN
else
    AUTH_STR="--kubeconfig=$KUBE_CONFIG"
fi
if test "$CRIT_THRESHOLD" -le "$WARN_THRESHOLD"; then
    echo notice: threshold looks incoherent >&2
fi

CHECK_NAMESPACES=`$KUBE_COMMAND $AUTH_STR get ns $ZONE_SELECTOR 2>/dev/null | awk 'NR>1{print $1}'`
for ns in $CHECK_NAMESPACES
do
    add=$($KUBE_COMMAND $AUTH_STR get pods -n $ns 2>/dev/null | awk "/$MATCH/{print \"$ns/\" \$1}")
    if test "$add"; then
	if test -z "$msg"; then
	    msg="$add"
	else
	    msg="$msg
$add"
	fi
    fi
done

if test "$msg"; then
    perfdata=`echo "$msg" | awk 'END{print NR}'`
    if test "0$perfdata" -ge $CRIT_THRESHOLD >/dev/null 2>&1; then
	ret=CRITICAL
    elif test "0$perfdata" -ge $WARN_THRESHOLD >/dev/null 2>&1; then
	ret=WARNING
    fi
    msg=": `echo "$msg" | tr '\n' ',' | sed 's|,$||'`"
fi

echo "KUBE-$MATCH-$ENV $ret$msg | $perfdata"
eval ret=\$$ret
exit $ret
