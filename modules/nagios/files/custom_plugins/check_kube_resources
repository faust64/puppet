#!/bin/sh
# check_kube_resources - watch Kubernetes & OpenShift CPU and Memory usages
# 20180525 - smoro@redhat.com

PRG=`basename $0`
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
KUBE_ENDPOINT=
KUBE_TOKEN=
KUBE_CONFIG=$HOME/.kube/config
CHECK_CLUSTER=OpenShift
CRIT_THRESHOLD=5
WARN_THRESHOLD=15
ret=OK
perfdata=0
ENV=all
ZONE_SELECTOR=
HEAPSTER_NAMESPACE=openshift-infra
HEAPSTER_SCHEME=https

while test "$1"
do
    case "$1" in
	-e|--endpoint)
	    if test "$2"; then
		KUBE_ENDPOINT="$2"
	    else
		echo Missing endpoint argument >&2
	    fi
	    shift
	    ;;
	-c|--critical)
	    if test "$2" -ge 0 >/dev/null 2>&1; then
		CRIT_THRESHOLD=$2
	    else
		echo Invalid critical threshold >&2
	    fi
	    shift
	    ;;
	-k|--kubeconfig)
	    if test -r "$2"; then
		KUBE_CONFIG="$2"
	    else
		echo "Could not read kubeconfig $2" >&2
	    fi
	    shift
	    ;;
	-o|--cluster)
	    if test "$2"; then
		CHECK_CLUSTER="$2"
		shift
	    else
		echo Missing cluster argument >&2
	    fi
	    ;;
	-s|--selector)
	    if echo "$2" | grep = >/dev/null; then
		ZONE_SELECTOR="--selector=$2"
	    elif test "$2"; then
		ZONE_SELECTOR="--selector=$2=true"
	    fi
	    if test "$ZONE_SELECTOR"; then
		ENV=$2
		shift
	    else
		echo Missing namespaces selector >&2
	    fi
	    ;;
	-t|--token)
	    if test "$2"; then
		KUBE_TOKEN="$2"
		shift
	    else
		echo Missing token argument >&2
	    fi
	    ;;
	-w|--warning)
	    if test "$2" -ge 0 >/dev/null 2>&1; then
		WARN_THRESHOLD=$2
	    else
		echo Invalid warning threshold >&2
	    fi
	    shift
	    ;;
	*)
	    echo "Invalid argument $1" >&2
	    ;;
    esac
    shift
done

getClusterConfig()
{
    awk "BEG{ pick = 0; }{
        if (\$0 == \"[$CHECK_CLUSTER]\") {
	    pick = 1;
	} else {
	    if (\$0 ~ /^\[.*\]/) {
		pick = 0;
	    } else {
		if (pick == 1) { print \$0; }
	    }
	}
    }" /etc/nagios/k8s.cfg
}

if test -s /etc/nagios/k8s.cfg -a -z "$KUBE_TOKEN"; then
    KUBE_TOKEN=$(getClusterConfig | awk '/^token/{print $3;exit;}')
    KUBE_ENDPOINT=$(getClusterConfig | awk '/^endpoint/{print $3;exit;}')
fi
if ! which oc >/dev/null 2>&1; then
    if ! which kubectl >/dev/null 2>&1; then
	echo UNKNOWN: missing oc and kubectl binaries
	exit $UNKNOWN
    fi
    HEAPSTER_ARGS=
    KUBE_COMMAND=kubectl
else
    HEAPSTER_ARGS="--heapster-namespace=$HEAPSTER_NAMESPACE --heapster-scheme=$HEAPSTER_SCHEME"
    KUBE_COMMAND=oc
fi
elif test "$KUBE_TOKEN" -a "$KUBE_ENDPOINT"; then
    if ! oc --insecure-skip-tls-verify "--token=$KUBE_TOKEN" "--server=$KUBE_ENDPOINT" whoami >/dev/null 2>&1; then
	echo UNKNOWN: invalid token querying OpenShift API
	exit $UNKNOWN
    fi
    AUTH_STR="--insecure-skip-tls-verify --token=$KUBE_TOKEN --server=$KUBE_ENDPOINT"
elif ! test -s $HOME/.kube/config; then
    echo UNKNOWN: missing oc configuration
    exit $UNKNOWN
elif ! oc "--kubeconfig=$KUBE_CONFIG" whoami >/dev/null 2>&1; then
    echo UNKNOWN: oc client not logged in
    exit $UNKNOWN
else
    AUTH_STR="--kubeconfig=$KUBE_CONFIG"
fi
if test "$CRIT_THRESHOLD" -ge "$WARN_THRESHOLD"; then
    echo notice: threshold looks incoherent >&2
fi

for node in `oc $AUTH_STR get nodes $ZONE_SELECTOR 2>/dev/null | awk 'NR>1{print $1}'`
do
    eval `oc $AUTH_STR adm top node $HEAPSTER_ARGS $node | sed 's|%||g' | awk "/^$node/{print \"cpu=\"\\$3 \" mem=\" \\$5}"`
    test "$perfdata" && perfdata="$perfdata,"
    perfdata="$perfdata$cpu/$mem"
    if test "$cpu" -ge `expr 100 - $WARN_THRESHOLD`; then
	if test "$cpu" -ge `expr 100 - $CRIT_THRESHOLD`; then
	    ret=CRIT
	elif test "$ret" = OK; then
	    ret=WARN
	fi
	test -z "$msg" || msg="$msg, "
	msg="$msg$node CPU is $cpu"
    fi
    if test "$mem" -ge `expr 100 - $WARN_THRESHOLD`; then
	if test "$mem" -ge `expr 100 - $CRIT_THRESHOLD`; then
	    ret=CRIT
	elif test "$ret" = OK; then
	    ret=WARN
	fi
	test -z "$msg" || msg="$msg, "
	msg="$msg$node Memory is $mem"
    fi
done
if test -z "$msg"; then
    msg="Nothing to report"
fi

echo "KUBE-resources-$ENV $ret: $msg | $perfdata"
eval ret=\$$ret
exit $ret
