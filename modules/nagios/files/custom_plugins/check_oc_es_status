#!/bin/sh

PRG=`basename $0`
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
KUBE_ENDPOINT=
KUBE_TOKEN=
KUBE_CONFIG=$HOME/.kube/config
OPENSHIFT_CLUSTER=OpenShift
ret=CRITICAL
msg=

while test "$1"
do
    case "$1" in
	-e|--endpoint)
	    if test "$2"; then
		KUBE_ENDPOINT="$2"
	    else
		echo Missing endpoint argument >&2
	    fi
	    shift
	    ;;
	-k|--kubeconfig)
	    if test -r "$2"; then
		KUBE_CONFIG="$2"
	    else
		echo "Could not read kubeconfig $2" >&2
	    fi
	    shift
	    ;;
	-o|--cluster)
	    if test "$2"; then
		OPENSHIFT_CLUSTER="$2"
		shift
	    else
		echo Missing cluster argument >&2
	    fi
	    ;;
	-t|--token)
	    if test "$2"; then
		KUBE_TOKEN="$2"
		shift
	    else
		echo Missing token argument >&2
	    fi
	    ;;
	*)
	    echo "Invalid argument $1" >&2
	    ;;
    esac
    shift
done

getClusterConfig()
{
    awk "BEG{ pick = 0; }{
        if (\$0 == \"[$OPENSHIFT_CLUSTER]\") {
	    pick = 1;
	} else {
	    if (\$0 ~ /^\[.*\]/) {
		pick = 0;
	    } else {
		if (pick == 1) { print \$0; }
	    }
	}
    }" /etc/nagios/openshift.cfg
}

if test -s /etc/nagios/openshift.cfg -a -z "$KUBE_TOKEN"; then
    KUBE_TOKEN=$(getClusterConfig | awk '/^token/{print $3;exit;}')
    KUBE_ENDPOINT=$(getClusterConfig | awk '/^endpoint/{print $3;exit;}')
fi
if ! which oc >/dev/null 2>&1; then
    echo UNKNOWN: missing oc binary
    exit $UNKNOWN
elif test "$KUBE_TOKEN" -a "$KUBE_ENDPOINT"; then
    if ! oc --insecure-skip-tls-verify "--token=$KUBE_TOKEN" "--server=$KUBE_ENDPOINT" whoami >/dev/null 2>&1; then
	echo UNKNOWN: invalid token querying OpenShift API
	exit $UNKNOWN
    fi
    AUTH_STR="--insecure-skip-tls-verify --token=$KUBE_TOKEN --server=$KUBE_ENDPOINT"
elif ! test -s $HOME/.kube/config; then
    echo UNKNOWN: missing oc configuration
    exit $UNKNOWN
elif ! oc "--config=$KUBE_CONFIG" whoami >/dev/null 2>&1; then
    echo UNKNOWN: oc client not logged in
    exit $UNKNOWN
else
    AUTH_STR="--config=$KUBE_CONFIG"
fi

podName=`oc $AUTH_STR get pods -n openshift-logging | awk '/logging-es-data-master/{print $1}'`
if test "$podName"; then
    clusterStatus=`oc $AUTH_STR exec -n openshift-logging -c elasticsearch $podName -- curl --cacert /etc/elasticsearch/secret/admin-ca --cert /etc/elasticsearch/secret/admin-cert --key /etc/elasticsearch/secret/admin-key https://localhost:9200/_cluster/health | sed 's|.*"status":"\([^"]*\)".*|\1|'`
    if echo "$clusterStatus" | grep -i green; then
	ret=OK
    else
	msg=": Cluster health is $clusterStatus"
    fi
else
    msg=": Could not locate ES pod"
    ret=UNKNOWN
fi

echo "OC-ES $ret$msg"
eval ret=\$$ret
exit $ret
