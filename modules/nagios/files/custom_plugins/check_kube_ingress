#!/usr/bin/env python
# check_kube_ingress - watch Kubernetes Ingress Controllers
# 20190315 - smoro@redhat.com

# python 2 & 3 capable
# Relies on /etc/nagios/k8s.cfg querying some cluster
# Define endpoints such as:
#[Prod]
#endpoint = https://openshift.example.com:8443
#token    = abcdef==
#[Ops]
#endpoint = https://kubernetes.demo.local:6443
#token    = ghijkl=

import getopt
import re
import requests
import sys
import urllib
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

try:
    opts, args = getopt.getopt(sys.argv[1:], "c:N:n:o:p:e:t:w:", [ "critical", "nodeselector", "nsmatch", "cluster", "pdmatch", "endpoint", "token", "warning" ])
except getopt.GetoptError as err:
    print(err)
    quit(3)

clusterid = 'Kubernetes'
msg       = 'Nothing to report'
nodematch = 'node-role.kubernetes.io/infra'
nodesel   = False
endpoint  = False
token     = False
crit      = 2
warn      = 1
ponamereg = '^ingress-nginx-controller-([a-z0-9]+)$'
nsnamereg = '^ingress-.*$'

for o, v in opts:
    if o in ( '--critical', '-c' ):
        crit = v
    elif o in ( '--pdmatch', '-p' ):
        pdnamereg = v
    elif o in ( '--nodeselector', '-N' ):
        if v in ( 'infra', 'masters', 'workers', 'compute' ):
            nodesel   = urllib.urlencode({ 'labelSelector': 'node-role.kubernetes.io/' + v + '=true' })
            nodematch = 'node-role.kubernetes.io/' + v
        else:
            nodesel   = urllib.urlencode({ 'labelSelector': v })
            nodematch = v.split('=')[0]
    elif o in ( '--nsmatch', '-n' ):
        nsnamereg = v
    elif o in ( '--cluster', '-o' ):
        clusterid = v
    elif o in ( '--endpoint', '-e' ):
        endpoint = v
    elif o in ( '--token', '-t' ):
        token = v
    elif o in ( '--warning', '-w' ):
        warn = v
    else:
        assert False, "unhandled option"

try:
    #python2
    import ConfigParser
    config = ConfigParser.ConfigParser()
except ModuleNotFoundError:
    #python3
    import configparser
    config = configparser.ConfigParser()

try:
    config.readfp(open(r'/etc/nagios/k8s.cfg'))
    try:
        if endpoint == False:
            endpoint = config.get(clusterid, 'endpoint')
        if token == False:
            token    = config.get(clusterid, 'token')
    except (ConfigParser.NoOptionError, configparser.NoOptionError):
        if token == False or endpoint == False:
            print("UNKNOWN: missing key in cluster " + clusterid + " in /etc/nagios/k8s.cfg")
            quit(3)
    except (ConfigParser.NoSectionError, configparser.NoSectionError):
        if token == False or endpoint == False:
            print("UNKNOWN: could not find cluster " + clusterid + " in /etc/nagios/k8s.cfg")
            quit(3)
except IOError:
    if token == False or endpoint == False:
        print("UNKNOWN: uninitialized endpoint - please set yours in /etc/nagios/k8s.cfg")
        quit(3)

if nodesel == False:
    url = endpoint + '/api/v1/nodes'
else:
    url = endpoint + '/api/v1/nodes?' + nodesel
headers = { "Authorization": "Bearer " + token }
req     = requests.get(url, headers=headers, verify=False)
data    = req.json()
ingress = []

try:
    if data['code'] == 401:
        print("UNKNOWN: failed querying Kubernetes API - denied")
        quit(3)
    elif data['code'] != 200:
        print("UNKNOWN: unexpected code received from Kubernetes API - " + data['code'])
        quit(3)
except KeyError:
    pass

try:
    if len(data['items']) <= 0:
        print("UNKNOWN: empty response received from Kubernetes API")
        quit(3)
except KeyError:
    print("UNKNOWN: no items returned from Kubernetes API")
    quit(3)

for i in data['items']:
    try:
        if i['metadata']['labels'][nodematch]:
            ingress.append(i['metadata']['name'])
            for j in i['status']['conditions']:
                if j['type'] == 'Ready':
                    if j['status'] != 'True':
                        print("CRITICAL: node " + i['metadata']['name'] + " is down")
                        quit(2)
    except KeyError:
        pass #ignoring non-ingress nodes

patternRouterNS = re.compile(nsnamereg)
patternRouter   = re.compile(ponamereg)
faultyRouter    = []
hasRouter       = []
url             = endpoint + '/api/v1/pods'
req             = requests.get(url, headers=headers, verify=False)
data            = req.json()

def isOK(podStatus):
    try:
        if podStatus['containerStatuses'][0]['ready'] == True:
            for cond in podStatus['conditions']:
                if cond['type'] == 'Ready':
                    if cond['status'] == 'True':
                        return True
        return False
    except KeyError:
        return False
    except ValueError:
        return False
   
for i in data['items']:
    try:
        for j in ingress:
                if i['spec']['nodeName'] == j:
                    if patternRouterNS.match(i['metadata']['namespace']):
                        if patternRouter.match(i['metadata']['name']):
                            hasRouter.append(j)
                            if not isOK(i['status']):
                                faultyRouter.append(j)
    except KeyError:
        pass

if len(ingress) < crit:
    msg = "CRITICAL: %s healthy ingress nodes" % len(ingress)
    code = 2
elif len(faultyRouter) >= crit:
    msg = "CRITICAL: routers missing " + ", ".join(faultyRouters)
    code = 2
elif len(faultyRouter) >= warn:
    msg = "WARNING: routers missing " + ", ".join(faultyRouters)
    code = 1
else:
    msg = "OK: Kubernetes Ingress services are UP (%s routers / $s nodes)" % (len(hasRouter), len(ingress))
    code = 0

print(msg)
quit(code)
