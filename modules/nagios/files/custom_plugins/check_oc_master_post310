#!/usr/bin/env python

# Relies on /etc/nagios/openshift.cfg querying some cluster

# Define endpoints such as:
#[Prod]
#endpoint = https://openshift.example.com:8443
#token    = abcdef
#[Sandbox]
#endpoint = https://openshift.demo.local:8443
#token    = ghijkl

# Create your token against some OpenShift cluster using:
#oc create -n monitoring-project sa monitoring-sa
#oc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:monitoring-project:monitoring-sa
#oc describe secret -n monitoring-project monitoring-sa-token-xxx

import ConfigParser
import getopt
import re
import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

try:
    opts, args = getopt.getopt(sys.argv[1:], "o:e:t:", [ "cluster", "endpoint", "token" ])
except getopt.GetoptError as err:
    print(err)
    quit(3)

clusterid = 'OpenShift'
msg       = 'Nothing to report'
endpoint  = False
token     = False

for o, v in opts:
    if o in ( '--cluster', '-o' ):
	clusterid = v
    elif o in ( '--endpoint', '-e' ):
	endpoint = v
    elif o in ( '--token', '-t' ):
	token = v
    else:
	assert False, "unhandled option"

config = ConfigParser.ConfigParser()
try:
    config.readfp(open(r'/etc/nagios/openshift.cfg'))
    try:
	if endpoint == False:
	    endpoint = config.get(clusterid, 'endpoint')
	if token == False:
	    token    = config.get(clusterid, 'token')
    except ConfigParser.NoOptionError:
	if token == False or endpoint == False:
	    print "UNKNOWN: missing key in cluster " + clusterid + " in /etc/nagios/openshift.cfg"
	    quit(3)
    except ConfigParser.NoSectionError:
	if token == False or endpoint == False:
	    print "UNKNOWN: could not find cluster " + clusterid + " in /etc/nagios/openshift.cfg"
	    quit(3)
except IOError:
    if token == False or endpoint == False:
	print "UNKNOWN: uninitialized endpoint - please set yours in /etc/nagios/openshift.cfg"
	quit(3)

headers = { "Authorization": "Bearer " + token }
url     = endpoint + '/api/v1/nodes'
req     = requests.get(url, headers=headers, verify=False)
data    = req.json()
masters = []

try:
    if data['code'] == 401:
	print "UNKNOWN: failed querying OpenShift API - denied"
	quit(3)
    elif data['code'] != 200:
	print "UNKNOWN: unexpected code received from OpenShift API - " + data['code']
	quit(3)
except KeyError:
    pass

try:
    if len(data['items']) <= 0:
	print "UNKNOWN: empty response received from OpenShift API"
	quit(3)
except KeyError:
    print "UNKNOWN: no items returned from OpenShift API"
    quit(3)

for i in data['items']:
    try:
	if i['metadata']['labels']['node-role.kubernetes.io/master']:
	    masters.append(i['metadata']['name'])
	    for j in i['status']['conditions']:
		if j['type'] == 'Ready':
		    if j['status'] != 'True':
			print "CRITICAL: node " + i['metadata']['name'] + " is down"
			quit(2)
    except KeyError:
	pass #ignoring non-master nodes

url  = endpoint + '/api/v1/pods'
req  = requests.get(url, headers=headers, verify=False)

patternConsole      = re.compile('^console-([a-z0-9]+)-([a-z0-9]+)$')
patternWebConsole   = re.compile('^webconsole-([a-z0-9]+)-([a-z0-9]+)$')

hasApi              = []
hasConsole          = []
hasControllers      = []
hasEtcd             = []
hasWebConsole       = []

def isOK(podStatus):
    try:
	if podStatus['containerStatuses'][0]['ready'] == True:
	    for cond in podStatus['conditions']:
		if cond['type'] == 'Ready':
		    if cond['status'] == 'True':
			return True
	return False
    except KeyError:
	return False
    except ValueError:
	return False
   
data = req.json()
for i in data['items']:
    try:
	for j in masters:
		if i['spec']['nodeName'] == j:
		    if i['metadata']['namespace'] == 'kube-system':
			if i['metadata']['name'] == 'master-api-' + j:
			    if not isOK(i['status']):
				hasApi.append(j)
			elif i['metadata']['name'] == 'master-controllers-' + j:
			    if not isOK(i['status']):
				hasControllers.append(j)
			elif i['metadata']['name'] == 'master-etcd-' + j:
			    if not isOK(i['status']):
				hasEtcd.append(j)
		    elif i['metadata']['namespace'] == 'openshift-web-console':
			if patternWebConsole.match(i['metadata']['name'] ):
			    if not isOK(i['status']):
				hasWebConsole.append(j)
		    elif i['metadata']['namespace'] == 'openshift-console':
			if patternConsole.match(i['metadata']['name'] ):
			    if not isOK(i['status']):
				hasConsole.append(j)
    except KeyError:
	pass

code = 1
if len(hasEtcd) > 0:
    msg = "WARNING: etcd missing " + hasEtcd[0]
elif len(hasApi) > 0:
    msg = "WARNING: API missing " + hasApi[0]
elif len(hasControllers) > 0:
    msg = "WARNING: Controllers missing " + hasControllers[0]
elif len(hasConsole) > 0:
    msg = "WARNING: Console missing " + hasConsole[0]
elif len(hasWebConsole) > 0:
    msg = "WARNING: WebConsole missing " + hasWebConsole[0]
else:
    msg = "OK: OpenShift Core services are UP"
    code = 0

print msg
quit(code)
