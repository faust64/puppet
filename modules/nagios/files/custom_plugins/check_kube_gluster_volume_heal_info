#!/bin/sh
# check_kube_gluster_volume_heal_info - watch GlusterFS CNS volumes heal info
#    querying Kubernetes or OpenShift API
# 20200130 - smoro@redhat.com

PRG=`basename $0`
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
KUBE_ENDPOINT=
KUBE_TOKEN=
KUBE_CONFIG=$HOME/.kube/config
CHECK_CLUSTER=OpenShift
CRIT_THRESHOLD=5
WARN_THRESHOLD=15
GFS_NAMESPACES=openshift-glusterfs

while test "$1"
do
    case "$1" in
	-e|--endpoint)
	    if test "$2"; then
		KUBE_ENDPOINT="$2"
	    else
		echo Missing endpoint argument >&2
	    fi
	    shift
	    ;;
	-c|--critical)
	    if test "$2" -ge 0 >/dev/null 2>&1; then
		CRIT_THRESHOLD=$2
	    else
		echo Invalid critical threshold >&2
	    fi
	    shift
	    ;;
	-k|--kubeconfig)
	    if test -r "$2"; then
		KUBE_CONFIG="$2"
	    else
		echo "Could not read kubeconfig $2" >&2
	    fi
	    shift
	    ;;
	-n|--namespace)
	    if test "$2"; then
		GFS_NAMESPACES="$2"
		shift
	    else
		echo "Missing GlusterFS CNS Namespace" >&2
	    fi
	    ;;
	-o|--cluster)
	    if test "$2"; then
		CHECK_CLUSTER="$2"
		shift
	    else
		echo Missing cluster argument >&2
	    fi
	    ;;
	-t|--token)
	    if test "$2"; then
		KUBE_TOKEN="$2"
		shift
	    else
		echo Missing token argument >&2
	    fi
	    ;;
	-w|--warning)
	    if test "$2" -ge 0 >/dev/null 2>&1; then
		WARN_THRESHOLD=$2
	    else
		echo Invalid warning threshold >&2
	    fi
	    shift
	    ;;
	*)
	    echo "Invalid argument $1" >&2
	    ;;
    esac
    shift
done

getClusterConfig()
{
    awk "BEG{ pick = 0; }{
        if (\$0 == \"[$CHECK_CLUSTER]\") {
	    pick = 1;
	} else {
	    if (\$0 ~ /^\[.*\]/) {
		pick = 0;
	    } else {
		if (pick == 1) { print \$0; }
	    }
	}
    }" /etc/nagios/k8s.cfg
}

if test -s /etc/nagios/k8s.cfg -a -z "$KUBE_TOKEN"; then
    KUBE_TOKEN=$(getClusterConfig | awk '/^token/{print $3;exit;}')
    KUBE_ENDPOINT=$(getClusterConfig | awk '/^endpoint/{print $3;exit;}')
fi
if ! which oc >/dev/null 2>&1; then
    if ! which kubectl >/dev/null 2>&1; then
	echo UNKNOWN: missing oc and kubectl binaries
	exit $UNKNOWN
    fi
    KUBE_COMMAND=kubectl
else
    KUBE_COMMAND=oc
fi
if test "$KUBE_TOKEN" -a "$KUBE_ENDPOINT"; then
    if ! $KUBE_COMMAND --insecure-skip-tls-verify "--token=$KUBE_TOKEN" "--server=$KUBE_ENDPOINT" version >/dev/null 2>&1; then
	echo UNKNOWN: invalid token querying Kubernetes API
	exit $UNKNOWN
    fi
    AUTH_STR="--insecure-skip-tls-verify --token=$KUBE_TOKEN --server=$KUBE_ENDPOINT"
elif ! test -s $HOME/.kube/config; then
    echo UNKNOWN: missing Kubernetes client configuration
    exit $UNKNOWN
elif ! $KUBE_COMMAND "--kubeconfig=$KUBE_CONFIG" version >/dev/null 2>&1; then
    echo UNKNOWN: $KUBE_COMMAND client not logged in, nor able to log in
    exit $UNKNOWN
else
    AUTH_STR="--kubeconfig=$KUBE_CONFIG"
fi
if test "$CRIT_THRESHOLD" -le "$WARN_THRESHOLD"; then
    echo notice: threshold looks incoherent >&2
fi

ret=UNKNOWN
FAULTY_VOLUMES=
for env in $GFS_NAMESPACES
do
    gpod=`$KUBE_COMMAN $AUTH_STR get pods -n $env 2>/dev/null | awk '/glusterfs/{print $1;exit;}'`
    if test -z "$gpod"; then
	echo "WARNING: could not find GlusterFS Pod in $env" >&2
	continue
    fi
    ret=OK
    for volumeName in `$KUBE_COMMAN $AUTH_STR exec -n $env $gpod -- gluster volume list | sed 's|[^[:print:]]||g' | cat`
    do
	if test -z "$volumeName"; then
	    continue
	fi
	entries=`$KUBE_COMMAN $AUTH_STR exec -n $env $gpod -- gluster volume heal $volumeName info | awk '/[nN]umber [oO]f [eE]ntries:/{print $4}' | sed 's|[^[:print:]]||g' | cat`
	for entry in $entries
	do
	    if test "$entry" -ne 0 >/dev/null 2>&1; then
		FAULTY_VOLUMES="$FAULTY_VOLUMES $volumeName"
		break
	    fi
	done
    done
done

msg="all fine"
perfdata=0
if test "$FAULTY_VOLUMES"; thene
    perfadta=`echo "$FAULTY_VOLUMES" | awk 'END{print NF}'`
    msg="foundd corruptions in volumes$FAULTY_VOLUMES"
    if test "$prefdata" -ge $CRIT_THRESHOLD; then
	ret=CRITICAL
    elif test "$prefdata" -ge $WARN_THRESHOLD; then
	ret=WARNING
    fi
fi

echo "KUBE-GFS-volumes $ret: $msg | $perfdata"
eval ret=\$$ret
exit $ret
