#!/bin/bash

which_info=`basename $0 | sed 's|^esx_\([a-z]*\)_.*|\1|'`
HOST=`basename $0 | sed -e 's|^esx_[a-z]*_\(.*\)|\1|' -e 's|_|.|g'`

case "$which_info" in
    cpu|df|hmem|gmem|mem)	;;
    *)	echo "Script name should be 'esx_{cpu,mem,hmem,gmem,df}_target'" >&2
	exit 1		;;
esac

function get_infos()
{
    summary="$(ssh "$HOST" vim-cmd hostsvc/hostsummary \; vim-cmd vmsvc/getallvms)"
}

function get_vmlist()
{
    total_linenumber="$(echo "$summary" | wc -l)"
    vmlist_linenumber="$(echo "$summary" | grep -n "^Vmid")"
    vmlist_linenumber="${vmlist_linenumber/:*/}"
    vmlist="$(echo "$summary" | tail -n `expr $total_linenumber - $vmlist_linenumber` | tr -s ' ')"
}

function get_datastores()
{
    datastores=`ssh $HOST df | sed 's|.*/\([^/]*\)$|\1|' | grep -i datastore`
}

function overallCpuUsage()
{
    cpu="$(echo "$1" | grep overallCpuUsage)"
    cpu="${cpu/*overallCpuUsage = /}"
    cpu="${cpu/,*/}"
}

function overallMemoryUsage()
{
    mem="$(echo "$1" | grep overallMemoryUsage)"
    mem="${mem/*overallMemoryUsage = /}"
    mem="${mem/,*/}"
}

function get_vmsvcsummaries()
{
    n=0
    cmd=
    while read vmline
    do
	id[$n]="${vmline%% *}"
	temp="${vmline#${id[$n]} }"
	name[$n]="${temp%% *}"
	cmd="$cmd vim-cmd vmsvc/get.summary ${id[$n]} \\\;"
	n=`expr $n + 1`
    done <<EOF
$vmlist
EOF
    vmsummaries="$(ssh "$HOST" $cmd)"
}

function VMoverallCpuUsage()
{
    cpulist="$(echo "$1" | grep overallCpuUsage)"
    n=0
    while read c
    do
	temp="${c/*overallCpuUsage = /}"
	vmcpu[$n]="${temp/,*/}"
	if test "${vmcpu[$n]}" == "<unset>"; then
	    vmcpu[$n]="0"
	fi
	n=`expr $n + 1`
    done <<EOF
$cpulist
EOF
}

function VMoverallGuestMemUsage()
{
    memlist="$(echo "$1" | grep guestMemoryUsage)"
    n=0
    while read m
    do
	temp="${m/*guestMemoryUsage = /}"
	vmmem[$n]="${temp/,*/}"
	if test "${vmmem[$n]}" == "<unset>"; then
	    vmmem[$n]="0"
	fi
	n=`expr $n + 1`
    done <<EOF
$memlist
EOF
}

function VMoverallHostMemUsage()
{
    memlist="$(echo "$1" | grep hostMemoryUsage)"
    n=0
    while read m
    do
	temp="${m/*hostMemoryUsage = /}"
	vmmem[$n]="${temp/,*/}"
	if test "${vmmem[$n]}" == "<unset>"; then
	    vmmem[$n]="0"
	fi
	n=`expr $n + 1`
    done <<EOF
$memlist
EOF
}

if test "$1" = autoconf; then
    get_infos
    if test -n "$summary"; then
	echo yes
	exit 0
    else
	echo "Cannot connect to ESX server $HOST"
	exit 1
    fi
elif test "$1" = config; then
    get_infos
    if test -z "$summary"; then
	echo "Cannot connect to ESX server $HOST"
	exit 1
    fi
    case "$which_info" in
	cpu)
	    echo graph_title ESXi $HOST CPU Usage
	    echo graph_args -l 0
	    echo graph_scale no
	    echo graph_vlabel CPU usage in MHz
	    echo graph_category esx
	    echo graph_info This graph shows the average CPU MHz used by each domain
	    echo Domain_0.label Domain_0
	    echo Domain_0.type GAUGE
	    echo Domain_0.draw AREA
	    echo Domain_0.min 0
	    echo Domain_0.info CPU MHz used by Domain_0
	    get_vmlist
	    if test -n "$vmlist"; then
		n=0
		cmd=
		while read vmline
		do
		    id="${vmline%% *}"
		    temp="${vmline#$id }"
		    name="${temp%% *}"
		    name=`echo $name | sed -e"s/[-\.]/_/g"`
		    echo "$name.label $name"
		    echo "$name.type GAUGE"
		    echo "$name.draw STACK"
		    echo "$name.min 0"
		    echo "$name.info CPU MHz used by $name"
		    n=`expr $n + 1`
		done <<EOF
$vmlist
EOF
	    fi
	    ;;
	df)
	    get_datastores
	    echo graph_title $HOST Disk usage in percent
	    echo graph_args --upper-limit 100 -l 0
	    echo graph_vlabel %
	    echo graph_scale no
	    echo graph_category esx
	    if test "$datastores"; then
		for name in $datastores
		do
		    echo _$name.label $name
		    echo _$name.warning 92
		    echo _$name.critical 98
		done
	    fi
	    ;;
	mem)
	    echo graph_title ESXi $HOST Domain Memory Usage
	    echo graph_args -l 0
	    echo graph_scale no
	    echo graph_vlabel Memory usage in Megabytes
	    echo graph_category esx
	    echo graph_info This graph shows the average Memory used
	    echo Domain_0.label Domain_0
	    echo Domain_0.type GAUGE
	    echo Domain_0.draw AREA
	    echo Domain_0.min 0
	    echo Domain_0.info Memory usage for Domain_0
	    ;;
	gmem)
	    echo graph_title ESXi $HOST VM Overall Guest Memory Usage
	    echo graph_args -l 0
	    echo graph_scale no
	    echo graph_vlabel Memory usage in Megabytes
	    echo graph_category esx
	    echo graph_info This graph shows the VM Overall Guest Memory Usage
	    get_vmlist
	    if test -n "$vmlist"; then
		n=0
		cmd=
		while read vmline
		do
		    id="${vmline%% *}"
		    temp="${vmline#$id }"
		    name="${temp%% *}"
		    name=`echo $name | sed -e"s/[-\.]/_/g"`
		    echo "$name.label $name"
		    echo "$name.type GAUGE"
		    echo "$name.draw AREASTACK"
		    echo "$name.min 0"
		    echo "$name.info Memory used by $name"
		    n=`expr $n + 1`
		done <<EOF
$vmlist
EOF
	    fi
	    ;;
	hmem)
	    echo graph_title ESXi $HOST VM Host Overall Memory Usage
	    echo graph_args -l 0
	    echo graph_scale no
	    echo graph_vlabel Memory usage in Megabytes
	    echo graph_category esx
	    echo graph_info This graph shows the VM Host Overall Memory Usage
	    get_vmlist
	    if test -n "$vmlist"; then
		n=0
		cmd=
		while read vmline
		do
		    id="${vmline%% *}"
		    temp="${vmline#$id }"
		    name="${temp%% *}"
		    name=`echo $name | sed -e"s/[-\.]/_/g"`
		    echo "$name.label $name"
		    echo "$name.type GAUGE"
		    echo "$name.draw AREASTACK"
		    echo "$name.min 0"
		    echo "$name.info Memory used by $name"
		    n=`expr $n + 1`
		done <<EOF
$vmlist
EOF
	    fi
	    ;;
    esac
    exit 0
fi
get_infos
if test -z "$summary"; then
    echo "Cannot connect to ESX server $HOST"
    exit 1
fi
case $which_info in
    cpu) overallCpuUsage "$summary" ;;
    mem) overallMemoryUsage "$summary" ;;
esac
get_vmlist
if test -n "$vmlist"; then
    get_vmsvcsummaries
    case $which_info in
	cpu) VMoverallCpuUsage "$vmsummaries";;
	hmem) VMoverallHostMemUsage "$vmsummaries";;
	gmem) VMoverallGuestMemUsage "$vmsummaries";;
    esac
fi
case $which_info in
    cpu) echo "Domain_0.value $cpu";;
    mem) echo "Domain_0.value $mem";;
    df) ssh "$HOST" df | while read line
	    do
		if echo $line | grep -i datastore >/dev/null; then
		    who=`echo $line | sed 's|.*/\([^/]*\)|\1|'`
		    echo _$who.value `echo $line | awk '{print $5}' | sed 's|\([0-9]*\)%|\1|'`
		fi
	    done
	    exit 0
	;;
esac
if test -n "$vmlist"; then
    n=0
    while test -n "${id[$n]}"
    do
	nicename=`echo ${name[$n]} | sed 's/[^a-z|A-Z|0-9]/\_/g'`
	case $which_info in
	    cpu) echo "$nicename".value "${vmcpu[$n]}";;
	    gmem|hmem) echo "$nicename".value "$((${vmmem[$n]}))";;
	esac
	n=`expr $n + 1`
    done
fi

exit 0
