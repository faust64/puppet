#!/usr/bin/perl

use strict;
use JSON::RPC::Legacy::Client;
use JSON;

my $username = $ENV{'username'} || 'transmission';
my $password = $ENV{'password'} || '';
my $host = $ENV{'host'} || '127.0.0.1';
my $port = $ENV{'port'} || 9091;

$0 =~ /transmission_(.+)*$/;
my $graph = $1;

if (exists $ARGV[0] and $ARGV[0] eq "suggest")
{
    print "traffic\nstatus\n";
}
elsif (exists $ARGV[0] and $ARGV[0] eq "config")
{
    print "graph_category torrent\n";
    if ($graph eq "traffic")
    {
	print "graph_title Transmission traffic\n";
	print "graph_vlabel Bytes\n";
	print "graph_order down up\n";
	print "graph_args --base 1024\n";
	print "down.label Download\n";
	print "down.draw LINE1\n";
	print "down.type COUNTER\n";
	print "down.min 0\n";
	print "down.graph no\n";
	print "down.cdef down,8,*\n";
	print "up.label Bps\n";
	print "up.draw LINE1\n";
	print "up.type COUNTER\n";
	print "up.min 0\n";
	print "up.negative down\n";
	print "up.cdef up,8,*\n";
    }
    elsif ($graph eq "status")
    {
	print "graph_title Transmission torrent status\n";
	print "graph_vlabel Count\n";
	print "graph_order stopped seeding waiting downloading checking\n";
	print "stopped.type GAUGE\n";
	print "stopped.label Stopped\n";
	print "stopped.draw AREASTACK\n";
	print "stopped.min 0\n";
	print "seeding.type GAUGE\n";
	print "seeding.label Seeding\n";
	print "seeding.draw AREASTACK\n";
	print "seeding.min 0\n";
	print "waiting.type GAUGE\n";
	print "waiting.label Waiting\n";
	print "waiting.draw AREASTACK\n";
	print "waiting.min 0\n";
	print "downloading.type GAUGE\n";
	print "downloading.label Downloading\n";
	print "downloading.draw AREASTACK\n";
	print "downloading.min 0\n";
	print "checking.type GAUGE\n";
	print "checking.label Checking\n";
	print "checking.draw AREASTACK\n";
	print "checking.min 0\n";
    }
}
else
{
    my $uri = "http://$host:$port/transmission/rpc";
    my $client = new JSON::RPC::Legacy::Client;
    my @content;

    $client->ua->credentials("$host:$port",'Transmission',$username,$password);
    $content[0] = $client->ua->get("http://$host:$port/transmission/rpc")->content;
    @content = split('<code>X-Transmission-Session-Id: ',$content[0]);
    @content = split('</code>',$content[1]);
    $client->ua->default_header('X-Transmission-Session-Id'=>"$content[0]");

    if ($graph eq "traffic")
    {
	my $obj = {
	    method    => 'session-stats',
	    arguments => {}
	};
	my $res = $client->call( $uri, $obj ) || die $! . " $uri\n";

	printf("up.value %d\n", $res->content->{'arguments'}->{'cumulative-stats'}->{'uploadedBytes'});
	printf("down.value %d\n", $res->content->{'arguments'}->{'cumulative-stats'}->{'downloadedBytes'});
    }
    elsif ($graph eq "status")
    {
	my $obj = {
	   method    => 'torrent-get',
	   arguments => {'fields' => ['status','name'] }
	};
	my $res = $client->call( $uri, $obj ) || die $! . " $uri\n";
	my @torrents = @{$res->content->{'arguments'}->{'torrents'}};
	my %state_counts = ();
	my %states = ('waiting' => 1, 'checking' => 2, 'downloading' => 4, 'seeding' => 8, 'stopped' => 16);

	for my $torrent (@torrents)
	{
	    $state_counts{$torrent->{status}}++;
	}
	while ((my $label, my $status) = each %states)
	{
	    print "$label.value ",$state_counts{$status} || 0,"\n";
	}
    }
}

exit 0;
