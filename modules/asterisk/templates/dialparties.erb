#!/usr/bin/php -q
<?php
require_once "phpagi.php";

$ext      = array();
$ext_hunt = array();
$screen   = false;
$dsarray  = array();
$AGI = new AGI();
debug("Starting New Dialparties.agi", 1);

$cwinusebusy = get_var($AGI, "CWINUSEBUSY");
$ast_version = <%=@version%>;
$chan_dahdi  = get_var($AGI, "ASTCHANDAHDI");
$cwignore    = get_var($AGI, "CWIGNORE");
$cwignore    = strtoupper(trim($cwignore));
$cfignore    = get_var($AGI, "CFIGNORE");
$cfignore    = strtoupper(trim($cfignore));
$ast_ge_16   = version_compare($ast_version, "1.6", "ge");

$has_extension_state = (get_var($AGI, "HAS_EXTENSION_STATE") || $ast_ge_16);
if (!$has_extension_state) {
    require_once "phpagi-asmanager.php";
    $ampmgruser  = get_var($AGI, "AMPMGRUSER");
    $ampmgrpass  = get_var($AGI, "AMPMGRPASS");
    $astman = $AGI->new_AsteriskManager();
    if (!$astman->connect("127.0.0.1", $ampmgruser , $ampmgrpass, 'off')) {
	exit (1);
    }
}

$cidnum  = $AGI->request['agi_callerid'];
$cidname = $AGI->request['agi_calleridname'];
debug("Caller ID name is '$cidname' number is '$cidnum'", 1);

$queue_wait = get_var($AGI, "QUEUEWAIT");
if ($queue_wait != '') {
    $saved_cidname = get_var($AGI, "SAVEDCIDNAME");
    $elapsed = round((time() - $queue_wait) / 60, 0);
    if ($saved_cidname == '') {
	$AGI->set_variable('__SAVEDCIDNAME', $cidname);
	$AGI->set_variable('CALLERID(name)', "M$elapsed:$cidname");
    } else {
	$AGI->set_variable('CALLERID(name)', "M$elapsed:$saved_cidname");
    }
}

$AGI->set_variable('__KEEPCID', 'TRUE');
$AGI->set_variable('DIALSTATUS_CW', '');

$timer	   = get_var($AGI, "ARG1");
$dialopts  = get_var($AGI, "ARG2");
$rgmethod  = get_var($AGI, "RingGroupMethod");
$rgmethod  = trim($rgmethod);
$alertinfo = get_var($AGI, "ALERT_INFO");
if ($alertinfo) {
    debug("Setting Alert-Info: $alertinfo", 4);
    $AGI->set_alertinfo($alertinfo);
}

$sippheader = get_var($AGI, "SIPADDHEADER");
if ($sippheader) {
    $fields = explode(':', $sippheader, 2);
    debug("Setting sipheader " . $fields[0] . ": " . $fields[1], 4);
    $AGI->exec_sipaddheader($fields[0], $fields[1]);
}

$fmgrp = get_var($AGI, "FMGRP");
if ($fmgrp != '') {
    $pr_dialstatus = get_var($AGI, "PR_DIALSTATUS");
} else {
    $pr_dialstatus = '';
}
$nodest	          = get_var($AGI, "NODEST");
$ringgroup_index  = get_var($AGI, "RINGGROUP_INDEX");
$use_confirmation = get_var($AGI, "USE_CONFIRMATION");
if (empty($use_confirmation)) {
    $use_confirmation = "FALSE";
}
debug("USE_CONFIRMATION: '$use_confirmation'", 5);
debug("RINGGROUP_INDEX:  '$ringgroup_index'", 5);

if (empty($timer)) {
    $timer = 0;
}
if (empty($dialopts)) {
    $dialopts = "";
}
if (empty($rgmethod)) {
    $rgmethod = "none";
}
debug("Methodology of ring is '$rgmethod'", 1);
$recall_mastermode = $rgmethod;
switch ($rgmethod) {
    case 'ringall-prim':
	$rgmethod   = "ringall";
	$mastermode = 1;
	break;
    case 'hunt-prim':
	$rgmethod   = "hunt";
	$mastermode = 1;
	break;
    case 'memoryhunt-prim':
	$rgmethod   = "memoryhunt";
	$mastermode = 1;
	break;
    case 'ringallv2-prim':
	$rgmethod   = "ringallv2";
	$mastermode = 1;
	break;
    default:
	$mastermode    = 0;
	$pr_dialstatus = "";
}

if ($cwignore && $rgmethod != "ringallv2") {
    $AGI->set_variable('__CWIGNORE', "");
}

if (($use_confirmation != "FALSE") && ($rgmethod != "ringall")
    && ($rgmethod != "ringallv2") && ($rgmethod != "hunt")
    && ($rgmethod != "random") ) {
    debug("Unsupported RingMethod: '$rgmethod' resetting to ringall", 1);
    $rgmethod = "ringall";
}

$arg_cnt = 3;
while ($arg = get_var($AGI, "ARG" . $arg_cnt)) {
    if ($arg == '-') {
	debug("get_variable got a \"noresponse\"!  Exiting",3);
	exit($arg_cnt);
    }
    $extarray = preg_split( '/-/', $arg );
    foreach ($extarray as $k) {
	$ext[] = $k;
	debug("Added extension $k to extension map", 3);
    }
    $arg_cnt++;
}

if ($rgmethod == "ringallv2" && $fmgrp != "") {
    $fmgrp_primaryremoved = 0;
    $fmgrp_prering        = $AGI->database_get('AMPUSER', $fmgrp . "/followme/prering");
    $fmgrp_prering        = $fmgrp_prering['data'] > 1 ? $fmgrp_prering['data'] : 2;
    $fmgrp_grptime        = $AGI->database_get('AMPUSER', $fmgrp . "/followme/grptime");
    $fmgrp_grptime        = $fmgrp_grptime['data'];
    $fmgrp_totalprering   = $fmgrp_grptime + $fmgrp_prering;
    debug("got fmgrp_prering: $fmgrp_prering, fmgrp_grptime: $fmgrp_grptime", 4);
    debug("fmgrp_totalprering: $fmgrp_totalprering", 4);
    if (in_array($fmgrp, $ext)) {
	debug("found extension in pre-ring and array", 4);
	$fmgrp_realprering = $fmgrp_totalprering;
	if ($ext[0] != $fmgrp) {
	    $tmpx = array_flip($ext);
	    unset($ext[$tmpx[$fmgrp]]);
	    array_unshift($ext, $fmgrp);
	}
    } else {
	debug("extension not in group list, ringing only during prering time", 4);
	$fmgrp_realprering = $fmgrp_prering;
	array_unshift($ext, $fmgrp);
    }
    debug("ringallv2 ring times: REALPRERING: $fmgrp_realprering, PRERING: $fmgrp_prering", 4);
}
$already_screened = get_var($AGI, "SCREEN");
$from_outside     = get_var($AGI, "FROM_DID");
if (($from_outside != '') && isset($ext[0])
    && ($rgmethod == "none" || $fmgrp == $ext[0])
    && ! $already_screened && !($nodest != '' && $fmgrp != $nodest)) {
    $screen_call = $AGI->database_get('AMPUSER', $ext[0] . "/screen");
    $screen_call = $screen_call['data'];
    if (strlen($screen_call)) {
	if ($screen_call == 'nomemory' && $cidnum != '') {
	    if (!preg_match('/[^ a-zA-Z\d]/', $cidnum)) {
		$astvarlibdir = get_var($AGI, "ASTVARLIBDIR");
		exec("rm -f $astvarlibdir/sounds/priv-callerintros/$cidnum.*");
	    }
	}
	$screen = true;
	$AGI->set_variable('__SCREEN', $screen_call);
	$AGI->set_variable('__SCREEN_EXTEN', $ext[0]);
	debug("Extension $k has call screening on", 4);
    } else {
	debug("Extension $k has call screening off", 4);
    }
}

$count = 0;
foreach ($ext as $k) {
    $cf = $AGI->database_get('CF', $k);
    $cf = $cf['data'];
    if (strlen($cf)) {
	if (!isset($realcalleridnum)) {
	    $realcalleridnum = get_var($AGI, "REALCALLERIDNUM");
	}
	if (! isset($blindtransfer)) {
	    $blindtransfer = get_var($AGI, "BLINDTRANSFER");
	}
	if (!isset($ampuser)) {
	    $ampuser = get_var($AGI, "AMPUSER");
	    if ($ampuser == '') {
		$ampuser = $cidnum;
	    }
	}
	if (($ampuser == $cf) || ($realcalleridnum == $cf)
	    || (strstr($blindtransfer, "/" . $cf . "-"))) {
	    debug("Extension $k cf is ignored", 1);
	} else {
	    if ($k == $cf) {
		debug("Loop detected, extension $k cf is ignored", 1);
	    } else {
		if ($cfignore) {
		    unset($ext[$count]);
		    debug("Extension $k has call forward set to $cf", 1);
		    $AGI->set_variable('DIALSTATUS','NOANSWER');
		} else {
		    $ext[$count] = $cf.'#';
		    debug("Extension $k has call forward set to $cf", 1);
		    if ($rgmethod == "none") {
			$AGI->set_variable('__DIVERSION_REASON', 'unconditional');
			$cfrt = $AGI->database_get('AMPUSER', $k . '/cfringtimer');
			$cfrt = $cfrt['data'];
			if (! empty($cfrt)) {
			    $timer = $cfrt < 0 ? "" : $cfrt;
			    debug("Ring timer changed to CF ringtimer value of " . ($cfrt < 0 ? "Always" : "$cfrt sec"), 1);
			}
		    }
		}

		if ($count == 0) {
		    $mastermode = 0;
		    $pr_dialstatus = "";
		    debug("Primary ext is CF so disabling mastermode if it was set", 4);
		}
	    }
	}
    } else {
	debug("Extension $k cf is disabled", 3);
    }
    $count++;
}

$count = 0;
$skipremaining = 0;
foreach ($ext as $k) {
    if ((substr($k,-1)!='#')) {
	$dnd = $AGI->database_get('DND',$k);
	$dnd = $dnd['data'];
	if (strlen($dnd) || $pr_dialstatus == "BUSY") {
	    debug("Extension $k has do not disturb enabled, or followme pre-ring returned busy", 2);
	    unset($ext[$count]);
	    $AGI->set_variable('DIALSTATUS','BUSY');
	    if ($count == 0 && $mastermode) {
		$skipremaining = 1;
		debug("Primary extension is DND, so if mastermode, all should be dnd", 4);
	    }
	    if ($count == 0) {
		$fmgrp_primaryremoved = 1;
	    }
	} else {
	    debug("Extension $k do not disturb is disabled", 3);
	}
    }
    $count++;
}

$ds = '';
foreach ($ext as $k) {
    if ($skipremaining == 0) {
	$extnum = $k;
	if ($cwignore) {
	    $exthascw = 0;
	} else {
	    $exthascw = $AGI->database_get('CW', $extnum);
	    $exthascw = $exthascw['data'] ? 1 : 0;
	}
	$extcfb    = $AGI->database_get('CFB', $extnum);
	$extcfb    = $extcfb['data'];
	$exthascfb = (strlen($extcfb) > 0) ? 1 : 0;
	$extcfu    = $AGI->database_get('CFU', $extnum);
	$extcfu    = $extcfu['data'];
	$exthascfu = (strlen($extcfu) > 0) ? 1 : 0;

	debug("extnum $extnum has cw: $exthascw; hascfb: $exthascfb [$extcfb] hascfu: $exthascfu [$extcfu]", 4);
	if ($mastermode == 1) {
	    $mastermode = 0;
	    $extstate = is_ext_avail($extnum);
	    debug("Extension $extnum has ExtensionState: $extstate", 1);
	    if (($exthascw == 1) && ($extstate != 0) && ($extstate != 4)) {
		$skipremaining = 1;
		debug("In mastermode with cw enabled so $extnum will be tried and others skipped",4);
	    } elseif (($exthascw == 0) && ($extstate != 0) && ($extstate != 4)) {
		$skipremaining = 1;
		debug("In mastermode with cw disabled so $extnum will be processed in case cfb set",4);
	    }
	}
    } else {
	continue;
    }
    if ((substr($k, -1) != '#')) {
	if (($exthascw == 0) || ($exthascfb == 1) || ($exthascfu == 1)) {
	    $extstate = is_ext_avail($extnum);
	    debug("Extension $extnum has ExtensionState: $extstate",1);

	    if (($exthascfu == 1) && ($extstate == 4)) {
		if ($rgmethod != '' && $rgmethod != 'none' && !$cfignore) {
		    debug("Extension $extnum has call forward on no answer set and is unavailable and is part of a Ring Group forwarding to '$extcfu'", 1);
		    $extnum = $extcfu . '#';
		} else {
		    debug("Extension $extnum has call forward on no answer set and is unavailable", 1);
		    $extnum = '';
		    $AGI->set_variable('DIALSTATUS','NOANSWER');
		}
	    } elseif (($exthascw == 0) || ($exthascfb == 1)) {
		debug("Checking CW and CFB status for extension $extnum",3);
		if ($extstate > 0 && $extstate != 4) {
		    debug("Extension $extnum is not available to be called", 1);
		    if ($exthascfb == 1 && ! $cfignore && $exthascw == 0) {
			if ($rgmethod == 'none') {
			    debug("Extension $extnum has call forward on busy set to $extcfb, dropping to macro-dial" ,1);
			    $extnum = '';
			    $AGI->set_variable('DIALSTATUS', 'BUSY');
			    $AGI->set_variable('__DIVERSION_REASON', 'user-busy');
			} else {
			    debug("Extension $extnum has call forward on busy set to $extcfb", 1);
			    $extnum = $extcfb . '#';
			}
		    } elseif ($exthascw == 0) {
			debug("Extension $extnum has call waiting disabled", 1);
			$extnum = '';
			$AGI->set_variable('DIALSTATUS', 'BUSY');
			$AGI->set_variable('__DIVERSION_REASON', 'user-busy');
		    } else {
			debug("Extension $extnum has call waiting enabled", 1);
		    }
		}
	    } elseif ($extstate < 0) {
		debug("ExtensionState for $extnum could not be read...assuming ok", 3);
	    } else {
		debug("Extension $extnum is available", 1);
	    }
	} elseif ($rgmethod == "none" && $exthascw == 1 && $cwinusebusy) {
	    $extstate = is_ext_avail($extnum);
	    if ($extstate > 0 && $extstate != 4) {
		$AGI->set_variable('DIALSTATUS_CW', 'BUSY');
		debug("Extension $extnum has call waiting enabled with state: $extstate", 1);
	    }
	} elseif (($exthascw == 1) && ($rgmethod == 'firstnotonphone')) {
	    $extstate = is_ext_avail($extnum);
	    debug("Extension $extnum has ExtensionState: $extstate", 1);
	    if ($extstate != 0) {
		debug("Extension $extnum has call waiting enabled but blocked for hunt", 1);
		$extnum = '';
		$AGI->set_variable('DIALSTATUS','BUSY');
	    }
	} elseif ($rgmethod == 'firstavailable') {
	    $extstate = is_ext_avail($extnum);
	    debug("Extension $extnum has ExtensionState: $extstate", 1);
	    if ($extstate == 4) {
		debug("Extension $extnum is unavailable so don't include in firstavailable hunt",1);
		$extnum = '';
		$AGI->set_variable('DIALSTATUS', 'BUSY');
	    }
	}
    }

    if ($extnum != '') {
	$realext = str_replace("#", "", $extnum);
	if (isset($dsarray[$realext])) {
	    debug("Extension '$realext' already in the dialstring, ignoring duplicate", 1);
	} else {
	    $dsarray[$realext] = 1;
	    $extds = get_dial_string($AGI, $extnum, $use_confirmation, $ringgroup_index);
	    if (strlen($extds)) {
		$ds .= $extds . '&';
	    }
	    if ((substr($k,-1) != '#') && (($rgmethod != "hunt")
		&& ($rgmethod != "random") && ($rgmethod != "memoryhunt")
		&& ($rgmethod != "firstavailable") && ($rgmethod != "firstnotonphone"))) {
		if (isset($cidnum) && is_numeric($cidnum)) {
		    $rc = $AGI->database_put('CALLTRACE', $k, $cidnum);
		    if ($rc['result'] == 1) {
			debug("dbset CALLTRACE/$k to $cidnum", 3);
		    } else {
			debug("Failed to DbSet CALLTRACE/$k to $cidnum ({$rc['result']})", 1);
		    }
		} else {
		    $AGI->database_del('CALLTRACE', $k);
		    debug("DbDel CALLTRACE/$k - Caller ID is not defined", 3);
		}
	    } else {
		$ext_hunt[$k] = $extds;
	    }
	}
    }
}

$myhuntmember  = "";
$dial_filtered = implode('-', array_keys($dsarray));
$AGI->set_variable('FILTERED_DIAL', $dial_filtered);
debug("Filtered ARG3: $dial_filtered", 3);

$dshunt	= '';
$loops	= 0;

if (($rgmethod == "hunt") || ($rgmethod == "random")
    || ($rgmethod == "memoryhunt") || ($rgmethod == "firstavailable")
    || ($rgmethod == "firstnotonphone")) {
    if ($cidnum) {
	$AGI->set_variable('CALLTRACE_HUNT', $cidnum);
    }
    if ($rgmethod == "random") {
	shuffle($extarray);
    }
    foreach ($extarray as $k) {
	if (isset($ext_hunt[$k]) && $ext_hunt[$k]) {
	    $myhuntmember = "HuntMember" . "$loops";
	    if (($rgmethod == "hunt") || ($rgmethod == "random")
		|| ($rgmethod == "firstavailable")
		|| ($rgmethod == "firstnotonphone")) {
		$AGI->set_variable($myhuntmember, $ext_hunt[$k]);
	    } elseif ($rgmethod == "memoryhunt") {
		if ($loops == 0) {
		    $dshunt = $ext_hunt[$k];
		} else {
		    $dshunt .= '&' . $ext_hunt[$k];
		}
		$AGI->set_variable($myhuntmember, $dshunt);
	    }
	    $loops += 1;
	}
    }
}

$ds = chop($ds," &");
if ($nodest != '' && $use_confirmation == 'FALSE') {
    if (strpos($dialopts,"M(auto-blkvm)") > 0
	|| strpos($dialopts,"M(auto-blkvm)") === 0
	|| strpos($dialopts,"M(auto-confirm") > 0
	|| strpos($dialopts,"M(auto-confirm") === 0
	|| strpos($dialopts,"M(confirm") > 0
	|| strpos($dialopts,"M(confirm") === 0) {
	debug("NODEST: $nodest blkvm enabled macro already in dialopts: $dialopts", 4);
    } else {
	$dialopts .= "M(auto-blkvm)";
	debug("NODEST: $nodest adding M(auto-blkvm) to dialopts: $dialopts", 4);
    }
}

if ($rgmethod == 'ringallv2') {
    $count = 0;
    foreach ($ext as $x) {
	if ($x == '') {
	    unset($ext[$count]);
	}
	$count++;
    }
    if (($skipremaining == 1)
	|| (count($ext) == 1 && $fmgrp_primaryremoved == 0)) {
	$timer = $fmgrp_realprering;
    } elseif (count($ext) == 1 && $fmgrp_primaryremoved == 1) {
	$timer = $fmgrp_grptime;
    } elseif (count($ext) == 1) {
	$timer = $fmgrp_totalprering;
    } else {
	$timer = $fmgrp_totalprering;
	$ds = "Local/FMPR-" . array_shift($ext) . "@from-internal&Local/FMGL-" . implode('-', $ext) . "@from-internal";
	$fmgrp_fmunique = $AGI->request['agi_channel'];
	$AGI->set_variable('_FMUNIQUE', $fmgrp_fmunique);
	$AGI->set_variable('_RingGroupMethod', "ringall");
	$fmgrp_prering -= 2;
	$AGI->set_variable('_FMPRERING', $fmgrp_prering);
	$AGI->set_variable('_FMREALPRERING', $fmgrp_realprering);
	$AGI->set_variable('_FMGRPTIME', $fmgrp_grptime);
	$AGI->set_variable('_FMPRIME', ($recall_mastermode == "ringallv2") ? "FALSE" : "TRUE");
	debug("FMUNIQUE: $fmgrp_fmunique, FMRERING: $fmgrp_prering, FMREALPRERING: $fmgrp_realprering, FMGRPTIME: $fmgrp_grptime", 6);
	if ($use_confirmation != 'FALSE') {
	    $AGI->set_variable('_USE_CONFIRMATION', $use_confirmation);
	    $AGI->set_variable('_RINGGROUP_INDEX', $ringgroup_index);
	    $use_confirmation = 'FALSE';
	}
    }
}

if ($nodest != '' && $use_confirmation == 'FALSE') {
    if (strpos($dialopts,"M(auto-blkvm)") > 0
	|| strpos($dialopts,"M(auto-blkvm)") === 0
	|| strpos($dialopts,"M(auto-confirm") > 0
	|| strpos($dialopts,"M(auto-confirm") === 0
	|| strpos($dialopts,"M(confirm") > 0
	|| strpos($dialopts,"M(confirm") === 0) {
	debug("NODEST: $nodest blkvm enabled macro already in dialopts: $dialopts", 4);
    } else {
	$dialopts .= "M(auto-blkvm)";
	debug("NODEST: $nodest adding M(auto-blkvm) to dialopts: $dialopts", 4);
    }
}

if (!strlen($ds)) {
    $AGI->noop('');
} else {
    if ($ast_ge_16) {
	$ds_seperator = ',';
    } else {
	$ds_seperator = '|';
    }

    if (($rgmethod == "hunt") || ($rgmethod == "memoryhunt")
	|| ($rgmethod == "random")
	|| ($rgmethod == "firstavailable")
	|| ($rgmethod == "firstnotonphone")) {
	$ds = $ds_seperator;
	if ($timer) {
	    $ds .= $timer;
	}
	$ds .= $ds_seperator . $dialopts;
	$AGI->set_variable('ds', $ds);
	$AGI->set_variable("HuntMembers", $loops);
	$AGI->set_priority("huntdial");
    } else {
	$ds .= $ds_seperator;
	if ($timer) {
	    $ds .= $timer;
	    if (trim($use_confirmation) != "FALSE") {
		$AGI->set_variable('__RT', $timer);
	    }
	}
	$ds .= $ds_seperator . $dialopts;
	if ($screen) {
	    $ds .= "p";
	}
	if (trim($use_confirmation) != "FALSE") {
	    $AGI->set_variable('__RG_IDX', $ringgroup_index);
	    if (isset($cidnum) && is_numeric($cidnum)) {
		$AGI->set_variable('__CALLCONFIRMCID', $cidnum);
	    } else {
		$AGI->set_variable('__CALLCONFIRMCID', "999");
	    }
	}
	$AGI->set_variable('ds', $ds);
	$AGI->set_priority("normdial");
    }
}

if (! $ds) {
    $dialstatus  = get_var($AGI, "DIALSTATUS");
    if (! $dialstatus) {
	debug("Setting default NOANSWER DIALSTATUS since no extensions available", 1);
	$AGI->set_variable('DIALSTATUS', 'NOANSWER');
    }
}

if (!$has_extension_state) {
    $astman->disconnect();
}

exit( 0 );

function get_var($agi, $value) {
    $r = $agi->get_variable($value);
    if ($r['result'] == 1) {
	$result = $r['data'];
	return $result;
    }
    return '';
}

function get_dial_string($agi, $extnum, $use_confirmation, $ringgroup_index) {
    global $chan_dahdi;
    $dialstring = '';
    if (strpos($extnum,'#') != 0) {
	$extnum = str_replace("#", "", $extnum);
	if (trim($use_confirmation) == "FALSE") {
	    $dialstring = 'Local/' . $extnum . '@from-internal/n';
	} else {
	    $dialstring = 'Local/RG-' . $ringgroup_index . '-' . $extnum . '#@from-internal';
	}
	debug("Built External dialstring component for $extnum: $dialstring", 4);
    } else {
	$device_str = sprintf("%s/device", $extnum);
	$device     = $agi->database_get('AMPUSER', $device_str);
	$device     = $device['data'];
	$device_array = preg_split( '/&/', $device );
	foreach ($device_array as $adevice) {
	    if (trim($use_confirmation) == "FALSE") {
		$dds = $agi->database_get('DEVICE', $adevice . '/dial');
		if ($chan_dahdi) {
		    $dialstring .= str_replace('ZAP/', 'DAHDI/', $dds['data']);
		} else {
		    $dialstring .= $dds['data'];
		}
		$dialstring .= '&';
	    } else {
		$dialstring .= 'Local/LC-' . $adevice . '@from-internal&';
	    }
	}
	$dialstring = trim($dialstring, " &");
    }
    return $dialstring;
}

function debug($string, $level=3) {
    global $AGI;
    $AGI->verbose($string, $level);
}

function is_ext_avail( $extnum ) {
    global $astman;
    global $AGI;
    global $has_extension_state;

    if ($has_extension_state) {
	$extstate_result  = get_var($AGI, "EXTENSION_STATE($extnum)");
	switch ($extstate_result) {
	    case "NOT_INUSE":
		$status = 0;
		break;
	    case "INUSE":
		$status = 1;
		break;
	    case "BUSY":
		$status = 2;
		break;
	    case "UNAVAILABLE":
		$status = 4;
		break;
	    case "RINGING":
		$status = 8;
		break;
	    case "RINGINUSE":
		$status = 9;
		break;
	    case "HOLDINUSE":
		$status = 17;
		break;
	    case "ONHOLD":
		$status = 16;
		break;
	    case "UNKNOWN":
	    default:
		$status = 4;
	}
	debug("EXTENSION_STATE: $status ($extstate_result)", 1);
    } else {
	$status = $astman->ExtensionState($extnum, 'from-internal');
	$status = $status['Status'];
	debug("ExtensionState: $status", 1);
    }
    return $status;
}
?>
